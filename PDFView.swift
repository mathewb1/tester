import SwiftUI
import PDFKit
import SwiftData

struct PDFView: View {
    @Query private var flightLogs: [FlightLogEntry]
    @State private var pdfDocument: PDFDocument?
    @State private var showGenerateButton = true
    
    var body: some View {
        NavigationView {
            ZStack {
                Color("BackgroundColor")
                    .ignoresSafeArea()
                
                if let document = pdfDocument {
                    PDFKitView(document: document)
                        .navigationTitle("Flight Logbook PDF")
                } else {
                    VStack {
                        if showGenerateButton {
                            Button(action: generatePDF) {
                                Text("Generate Flight Logbook PDF")
                                    .font(.headline)
                                    .padding()
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                        } else {
                            ProgressView("Generating PDF...")
                        }
                    }
                    .navigationTitle("PDF Viewer")
                }
            }
        }
    }
    
    private func generatePDF() {
        showGenerateButton = false
        
        // Create PDF document
        let pdfMetaData = [
            kCGPDFContextCreator: "Flight Logbook App",
            kCGPDFContextAuthor: "Generated by App"
        ]
        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]
        
        let pageWidth: CGFloat = 612  // 8.5 x 72
        let pageHeight: CGFloat = 792  // 11 x 72
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)
        
        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)
        
        let data = renderer.pdfData { context in
            context.beginPage()
            
            // Draw title
            let titleFont = UIFont.boldSystemFont(ofSize: 18)
            let titleAttributes: [NSAttributedString.Key: Any] = [
                .font: titleFont
            ]
            let titleString = "Flight Logbook"
            let titleStringSize = titleString.size(withAttributes: titleAttributes)
            let titleX = (pageWidth - titleStringSize.width) / 2
            titleString.draw(at: CGPoint(x: titleX, y: 50), withAttributes: titleAttributes)
            
            // Define table headers
            let headers = ["Date", "Pilot", "Aircraft", "From", "To", "Duration", "T/O", "Ldg"]
            let columnWidths: [CGFloat] = [80, 80, 80, 60, 60, 70, 40, 40]
            let startY: CGFloat = 100
            let rowHeight: CGFloat = 30
            var currentX: CGFloat = 40
            var currentY = startY
            
            // Draw headers
            let headerFont = UIFont.boldSystemFont(ofSize: 12)
            let headerAttributes: [NSAttributedString.Key: Any] = [
                .font: headerFont
            ]
            
            for (index, header) in headers.enumerated() {
                let rect = CGRect(x: currentX, y: currentY, width: columnWidths[index], height: rowHeight)
                header.draw(in: rect, withAttributes: headerAttributes)
                currentX += columnWidths[index]
            }
            
            // Draw horizontal line under headers
            context.cgContext.setLineWidth(1.0)
            context.cgContext.move(to: CGPoint(x: 40, y: currentY + rowHeight))
            context.cgContext.addLine(to: CGPoint(x: pageWidth - 40, y: currentY + rowHeight))
            context.cgContext.strokePath()
            
            // Draw data rows
            let dataFont = UIFont.systemFont(ofSize: 10)
            let dataAttributes: [NSAttributedString.Key: Any] = [
                .font: dataFont
            ]
            
            currentY += rowHeight
            let dateFormatter = DateFormatter()
            dateFormatter.dateStyle = .short
            
            for log in flightLogs {
                if currentY + rowHeight > pageHeight - 50 {
                    context.beginPage()
                    currentY = 50
                }
                
                currentX = 40
                let date = dateFormatter.string(from: log.date)
                
                let rowData = [
                    date,
                    log.pilotName,
                    log.aircraft,
                    log.departureLocation,
                    log.arrivalLocation,
                    log.duration,
                    String(log.takeoffs),
                    String(log.landings)
                ]
                
                for (index, data) in rowData.enumerated() {
                    let rect = CGRect(x: currentX, y: currentY, width: columnWidths[index], height: rowHeight)
                    data.draw(in: rect, withAttributes: dataAttributes)
                    currentX += columnWidths[index]
                }
                
                currentY += rowHeight
                
                // Draw horizontal line
                context.cgContext.setLineWidth(0.5)
                context.cgContext.move(to: CGPoint(x: 40, y: currentY))
                context.cgContext.addLine(to: CGPoint(x: pageWidth - 40, y: currentY))
                context.cgContext.strokePath()
            }
        }
        
        pdfDocument = PDFDocument(data: data)
        showGenerateButton = true
    }
}

struct PDFKitView: UIViewRepresentable {
    let document: PDFDocument

    func makeUIView(context: Context) -> PDFKit.PDFView {
        let pdfView = PDFKit.PDFView()
        pdfView.document = document
        pdfView.autoScales = true
        return pdfView
    }

    func updateUIView(_ uiView: PDFKit.PDFView, context: Context) {
        // No updates needed
    }
}